#define _CRT_SECURE_NO_WARNINGS
// #define PX4ADDR *(unsigned char *)0x6000

#include <stdio.h>
#include <stdlib.h>
#include "ec-kcdsa.h"

void main() {

	// public key 생성시 필요한 객체
	MPZ example;
	ECC_PARAMS curve;
	ECC_POINT public_point2;

	// 00000000: ee9e ff1f 1164 0000 ad7d 0000 ad7d 0000
	// 001c5030: 70bd 019a 0132 f5e7 00f0 0140 4480 0440

	// Px4 image 크기 : 1c5030 = 1855536

	//unsigned char msg[1855536];
	//int msglen = 1855536;
	




	
	// example demo 
	
	unsigned char msg1[] =
	{
		0xee, 0x9e, 0xff, 0x1f, 0x11, 0x64, 0x00, 0x00, 0xad, 0x7d, 0x00, 0x00, 0xad, 0x7d, 0x00,0x00,
		0x70, 0xbd, 0x01, 0x9a, 0x01, 0x32, 0xf5, 0xe7, 0x00, 0xf0, 0x01, 0x40, 0x44, 0x80, 0x04,0x40

	};
	int msg1Len = 32;
	

	// 00000000: ee9e ff1f 1164 0000 ad7d 0000 ad7d 0000
	// 001c5030: 70bd 019a 0132 f5e7 00f0 0140 4480 0440

	// Px4 image 크기 : 1c5030 = 1855536

	//unsigned char msg[1855536];
	//int msglen = 1855536;


	// 키생성을 위한 사용자 입력
	unsigned char user_provided_random_input[] =
	{
		0x73, 0x61, 0x6C, 0x64, 0x6A, 0x66, 0x61, 0x77, 0x70, 0x33, 0x39, 0x39, 0x75, 0x33, 0x37, 0x34,
		0x72, 0x30, 0x39, 0x38, 0x75, 0x39, 0x38, 0x5E, 0x25, 0x5E, 0x25, 0x68, 0x6B, 0x72, 0x67, 0x6E,
		0x3B, 0x6C, 0x77, 0x6B, 0x72, 0x70, 0x34, 0x37, 0x74, 0x39, 0x33, 0x63, 0x25, 0x24, 0x38, 0x39,
		0x34, 0x33, 0x39, 0x38, 0x35, 0x39, 0x6B, 0x6A, 0x64, 0x6D, 0x6E, 0x76, 0x63, 0x6D, 0x20, 0x63,
		0x76, 0x6B, 0x20, 0x6F, 0x34, 0x75, 0x30, 0x39, 0x72, 0x20, 0x34, 0x6A, 0x20, 0x6F, 0x6A, 0x32,
		0x6F, 0x75, 0x74, 0x32, 0x30, 0x39, 0x78, 0x66, 0x71, 0x77, 0x3B, 0x6C, 0x2A, 0x26, 0x21, 0x5E,
		0x23, 0x40, 0x55, 0x23, 0x2A, 0x23, 0x24, 0x29, 0x28, 0x23, 0x20, 0x7A, 0x20, 0x78, 0x6F, 0x39,
		0x35, 0x37, 0x74, 0x63, 0x2D, 0x39, 0x35, 0x20, 0x35, 0x20, 0x76, 0x35, 0x6F, 0x69, 0x75, 0x76,
		0x39, 0x38, 0x37, 0x36, 0x20, 0x36, 0x20, 0x76, 0x6A, 0x20, 0x6F, 0x35, 0x69, 0x75, 0x76, 0x2D,
		0x30, 0x35, 0x33, 0x2C, 0x6D, 0x63, 0x76, 0x6C, 0x72, 0x6B, 0x66, 0x77, 0x6F, 0x72, 0x65, 0x74
	};
	int user_provided_random_input_Len = 160;
	//unsigned char sig[72];

	
	ECC_init_params(ECC_PRIME_FIELD, &curve, SECP256r);
	
	ECC_set_params(SECP256r, &curve);

	Private_Key_generator(&example, curve, SECP256r, SHA256, user_provided_random_input, user_provided_random_input_Len)


	Public_Key_generator(&public_point2, example.dat, curve);

	/*

	AA D8 CF 9C 3C 81 A0 51 86 F5 9E 7E 09 EF B1 0D 8E 59 2D B0 07 9B E3 29 E7 26 82 9B
	5A 9B 10 56 AB 68 BF 38 CE 7A 6F B6 C5 D0 21 C2 6A D0 22 CB AB 7B 99 57 43 46 0D FF
	20 26 08 AE 07 3B 99 17 CC CC CC CC CC CC CC CC
	*/

	EC_KCDSA_sign(public_point2, curve, example.dat, SECP256r, SHA256, msg1, msg1Len, sig);

	printf("R = ");
	for (int i = 0; i < 28; i++) {
		printf("%02X ", sig[i]);
	}
	printf("\n");
	printf("S = ");
	for (int i = 28; i < 56; i++) {
		printf("%02X ", sig[i]);
	}
	printf("\n");

/*
	int ret = EC_KCDSA_verify(public_point, sig, curve, SECP224r, SHA224, msg, msgLen);
	printf("verify :");
	if (ret == 0)
		printf("Success\n");
	else
		printf("Fail\n");
		*/

}
